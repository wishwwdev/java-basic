package chapter4;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

// CollectionFramework
// 데이터를 저장, 검색, 수정, 삭제 표준화된 데이터 구조를 제공하는 인터페이스 및 그 구현체들
// 단순한 배열만을 사용했을 때 발생하는 여러 문제 및 불편사항을 해결함
public class CollectionFramework {

	public static void main(String[] args) {
		
		// 배열의 문제
		// 1. 배열을 생성할 때 사용할 배열의 길이를 미리 지정해야함
		//		-> 유연한 배열 사용을 불가능하게 함
		int[] intArray = new int[10];
		
		// 2. 데이터를 추가할 때 빈 요소를 찾아야하는 불편함이 있음
		// 		-> 배열 요소의 null인 위치에 값을 넣기 위한 로직을 작성해야함
		// 		-> 배열의 길이를 초과하는 경우 요소를 추가할 수 없음
		
		// 3. 데이터를 삭제할 때 중간에 빈 요소가 생기기 때문에
		// 	  추가적으로 뒤에오는 요소를 앞으로 당기는 로직을 작성해야함
		
		// 4. 만약 중복된 데이터를 추가하고 싶지 않다면 배열에서
		// 	  해당 요소가 중복되는지 검사하는 로직을 작성해야함
		
		// 위의 문제를 해결하기위해 CollectionFramework를 사용할 수 있음
		
		// 1. List Interface
		// '순서가 존해'하며 '중복된 요소를 허용'하는 데이터 구조
		// 기본적인 배열과 가장 유사한 형태
		// 구현체 : ArrayList, LinkedList
		// ArrayList : 내부적인 배열을 사용해서 데이터를 저장 - 인덱스를 이용한 접근이 빠름
		// LinkedList : 내부적인 이중 연결 배열을 사용해서 데이터를 저쟝 - 추가, 삭제가 빠름
		List<String> arrayList = new ArrayList<>();
		List<Integer> intList = new ArrayList<>();
		List linkedList = new LinkedList();
		
		
		// List Interface의 메서드 : add(), get(), set(), remove(), size()
		// add() : 요소 추가
		// get() : 요소 검색
		// set() : 요소 수정
		// remove() : 요소 삭제
		// size() : 리스트의 길이
		arrayList.add("String");
		arrayList.add(1, "Comment");
		arrayList.add(1, "Reply");
		
		System.out.println(arrayList.get(2));
		String str1 = arrayList.get(0);
		
		arrayList.set(0, "Hello");
		System.out.println(arrayList.get(0));
		
		arrayList.remove(0);
		System.out.println(arrayList.get(0));
		
		System.out.println(arrayList.size());
		
		
		
		
		
		
		
		
	}

}
